{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","helpers/isValidByPattern.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","props","name","value","label","required","pattern","onChange","useState","Math","random","toString","slice","id","touched","setTouched","isEmptyValue","setIsEmptyValue","hasError","changed","key","newValue","length","replaceAll","isValidByPattern","trim","htmlFor","classNames","type","placeholder","event","target","onBlur","initialFormState","NewMovie","onAdd","count","setCount","formState","setFormState","updateFormState","prev","isValidForm","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bae27b0.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { isValidByPattern } from '../../helpers/isValidByPattern';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  pattern?: RegExp\n  onChange?: (key: string, value: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = (props) => {\n  const {\n    name,\n    value,\n    label = name,\n    required = false,\n    pattern,\n    onChange = () => {},\n  } = props;\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const [isEmptyValue, setIsEmptyValue] = useState(false);\n\n  const hasError = touched && required && (!value || isEmptyValue);\n\n  const changed = (key: string, newValue: string) => {\n    if (pattern && !isValidByPattern(newValue, pattern)) {\n      return;\n    }\n\n    setIsEmptyValue(!newValue.trim());\n\n    onChange(key, newValue);\n  };\n\n  const blurHandler = () => {\n    setIsEmptyValue(!value.trim());\n    setTouched(true);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => changed(name, event.target.value)}\n          onBlur={blurHandler}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","export const isValidByPattern = (\n  value: string,\n  pattern: RegExp | undefined,\n) => {\n  if (!pattern) {\n    return true;\n  }\n\n  return value.length === value.replaceAll(pattern, '').length;\n};\n","import { FC, FormEvent, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype NewMovieProps = {\n  onAdd: (movie: Movie) => void\n};\n\nconst initialFormState: Movie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: FC<NewMovieProps> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [formState, setFormState] = useState<Movie>(initialFormState);\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = formState;\n\n  const updateFormState = (key: string, value: string) => {\n    setFormState(prev => ({\n      ...prev,\n      [key]: value,\n    }));\n  };\n\n  const clearForm = () => {\n    setFormState(initialFormState);\n  };\n\n  const isValidForm = title.trim() !== ''\n    && imgUrl.trim() !== ''\n    && imdbUrl.trim() !== ''\n    && imdbId.trim() !== '';\n\n  const submit = (event: FormEvent) => {\n    event.preventDefault();\n    onAdd(formState);\n\n    setCount(prev => prev + 1);\n    clearForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={submit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={updateFormState}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={updateFormState}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={updateFormState}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={updateFormState}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={updateFormState}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isValidForm}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const add = (movie: Movie) => {\n    setMovies(prev => [...prev, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={add} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}